Notes on Ruby

In ruby files (to make them executable), include:
  #!/usr/bin/env ruby -v

To install rvm and ruby:

  \curl -L https://get.rvm.io | bash -s stable --ruby


To install another version of ruby:

  rvm install 2.0.0-p247
  rvm use 2.0.0-p247
  rvm --default 2.0.0-p247

To generate documentation
  rvm docs generate

To update rvm
  rvm get stable

Make sure rvm uses homebrew:
  rvm autolibs homebrew

gem install roo     # for parsing excel files
gem install wirble  # syntax highlighting in irb
gem install gsl     # gnu scientific library
gem install sciruby # sciruby [didn't completely work]
gem install bio     # bioruby

Remove unnecessary old versions of gems:
gem cleanup

-----------

# copying arrays
a = [1,2,3]
b = a
c = a.dup
a.equal? b
!(a.equal? c)

# does a directory exist?
Dir.exists?("directory_name_here") # must be a _directory_
File.exists?("some_file_name")

# files in a directory
Dir.entries(".")

# select parts of an array
a = [2, 7, 5, 4]
b = a.select { |el| el > 4 }

# no list comprehension, but you can use select and map
x = [2, 7, 5, 4]
y = x.select{|e| e > 2}.map{|e| 2*e}

# one line if-else
x = 5
y = x > 3 ? x : 3

# item in array
x = ["a", "b", "c", "d"]
x.include?("e")

# sort strings as numbers
a = ['1', '12', '21', '3', '4']
a.sort_by(&:to_f)

# ternary operator
ifile = ARGV.length > 0 ? ARGV[0] : "ggplot2.Rmd"

# regular expression substitution
ofile = ifile.gsub(/(\.\w+)$/, '_slides\1')
# (so "blah.Rmd" becomes "blah_slides.Rmd")

# aborting
abort("file #{ofile} already exists") if File.exists?(ofile)

# adding to an array
x = [1, 2, 3]
x + [4, 5] # -> [1,2,3,4,5] (but x doesn't change)
x += [4,5] # -> x now is [1,2,3,4,5]
x.insert(1, -1) # -> [1,-1,2,3,4,5] (x is changed)

# hashes
x = {"name" => "karl", "age" => "really_old", "shoe_size"=> 8}
x["name"]
x.keys
x.values
x.has_key?('age') # check for specific key

# hash with symbols as the keys
y = {name: "karl", age: "really_old", shoe_size: 8} # no space between key and :
y[:name] # keys turned into symbols
y.keys
y.values

# combining array into string
x = ["a", "b", "c"]
x.join(',')

# set
require 'set'
x = Set.new()
x.add("a")
x.add("b")
x.add("a")

# convert array to set
x = ["A", "B", "C", "B"]
y = x.to_set()
y.delete("C") # delete item from set

# define function
def f(arg)
    arg*2
end

# read lines from file
f = File.open("some_file.txt")
f.each_line do |line|
    line.strip()
    # do something else
end

# test whether something is nil
x = 5
x.nil?
y = nil
y.nil?

# do something to a bunch of files in a directory
#   here, rename files like "myfile.txt" as "myfile_orig.txt"
dir = Dir.open(".")
dir.each do |file|
    if file =~ /^(.*).txt$/
        `mv #{file} #{$1}_orig.txt`
    end
end
